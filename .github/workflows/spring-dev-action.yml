name: Build Changed Services After Merge and Push to ECR

on:
  push:
    branches: [ "spring-dev" ]   # main 브랜치로 머지된 시점에만 실행
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  AWS_ACCOUNT_ID: 857360183365
  TAG: ${{ github.sha }}   # 커밋 해시 기반 버전
  EXCLUDE_DIRS: "common"
  BASE_BRANCH: origin/spring-dev   # 비교 기준 브랜치 지정


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      #코드 체크 아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0    # 전체 히스토리 필요 (merge base 비교용)

      # Gradle 캐싱
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      #JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: microsoft
          java-version: 17
          cache: gradle

      # OIDC 설정
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::857360183365:role/bytogether-gitaction-role
          aws-region: ${{ env.AWS_REGION }}

      #ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      #변경 사항 감지
      - name: Detect changed services
        id: detect
        run: |
          echo "🔍 Detecting services changed since base branch ($BASE_BRANCH)..."
          git fetch origin $BASE_BRANCH
          BASE=$(git merge-base HEAD $BASE_BRANCH)
          git diff --name-only $BASE HEAD > changed_files.txt

          echo "변경된 파일 목록:"
          cat changed_files.txt || true

          CHANGED_DIRS=$(grep '/' changed_files.txt | cut -d'/' -f1 | sort -u | uniq)
          TARGETS=""
          for DIR in $CHANGED_DIRS; do
            if [[ -d $DIR && ! " $EXCLUDE_DIRS " =~ " $DIR " ]]; then
              TARGETS="$TARGETS $DIR"
            fi
          done
          echo "targets=$(echo $TARGETS | xargs)" >> $GITHUB_OUTPUT
          echo "머지로 변경된 서비스: $TARGETS"

      # 빌드 & 푸쉬
      - name: Build and Push changed services
        if: steps.detect.outputs.targets != ''
        run: |
          for SERVICE in ${{ steps.detect.outputs.targets }}; do
            echo "🏗️ Building and pushing $SERVICE ..."

            cd $SERVICE
            chmod +x ./gradlew
            ./gradlew clean build -x test

            docker build -t $SERVICE:$TAG .
            docker tag $SERVICE:$TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$SERVICE:$TAG
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$SERVICE:$TAG

            cd ..
          done

      # 안바뀌었으면 통과
      - name: No changed services
        if: steps.detect.outputs.targets == ''
        run: echo "✅ No changed services in this merge."
