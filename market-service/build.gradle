plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.bytogether'
version = '0.0.1-SNAPSHOT'
description = 'market-service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
}

dependencies {
    // AWS

    // https://mvnrepository.com/artifact/com.amazonaws/aws-lambda-java-core
    implementation 'com.amazonaws:aws-lambda-java-core:1.4.0'
    // https://mvnrepository.com/artifact/com.amazonaws/aws-lambda-java-events
    implementation 'com.amazonaws:aws-lambda-java-events:3.16.1'
    // https://mvnrepository.com/artifact/software.amazon.awssdk/s3
    implementation 'software.amazon.awssdk:s3:2.34.5'
    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-function-adapter-aws
    implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws:4.3.0'


    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    // jts, hibernate-spatial -> PostGIS
    implementation 'org.locationtech.jts:jts-core:1.19.0'
    implementation 'org.hibernate:hibernate-spatial:6.2.7.Final'

    // QueryDSL 의존성
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // swagger
    // https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'

    // config client -> k8s config map로 대체
//    implementation 'org.springframework.cloud:spring-cloud-starter-config'

//    eureka client -> k8s service discovery 사용으로 주석 처리
//    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'


    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    compileOnly 'org.projectlombok:lombok'

    // Prometheus & Micrometer
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Loki (로그)
    implementation 'com.github.loki4j:loki-logback-appender:1.5.2'

    // Tempo (분산 추적)
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

//    추적 임시
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    // for k8s
//    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
    implementation 'io.github.openfeign:feign-micrometer'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}
// ✅ QueryDSL QClass 생성 경로 설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main {
        java {
            srcDir querydslDir
        }
    }
}

tasks.withType(JavaCompile) {
    options.annotationProcessorPath = configurations.annotationProcessor
}

// ✅ Q 클래스가 빌드 시 자동 생성되게 설정
tasks.named('compileJava') {
    doFirst {
        file(querydslDir).mkdirs()
    }
}

// end of settings for QueryDSL

tasks.named('test') {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
//kis- 251028